# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_CONTEXT_PATH:/api}
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,application/javascript,application/json
    min-response-size: 1024

# Spring Configuration
spring:
  application:
    name: ReelNetApp
  
  # Profile Configuration
  profiles:
    active: dev
  
  # Database Configuration  
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: ${SPRING_DATASOURCE_DRIVER_CLASS_NAME:org.postgresql.Driver}
    hikari:
      minimum-idle: 10
      maximum-pool-size: 50
      idle-timeout: 30000
      pool-name: ReelNetHikariCP
  
  # JPA Configuration  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        '[format_sql]': true
        dialect: ${SPRING_JPA_DATABASE_PLATFORM:org.hibernate.dialect.PostgreSQLDialect}
        jdbc:
          '[time_zone]': UTC
    open-in-view: false
  
  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${auth0.issuer}
          jwk-set-uri: https://${auth0.domain}/.well-known/jwks.json
  
  # Kafka Configuration
  kafka:
    enabled: false  # Disable Kafka by default
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP_ID:reelnet-group}
    topics:
      domain-events: domain-events
  
  # Flyway Configuration
  flyway:
    enabled: false # Disable flyway by default
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    clean-disabled: true
  
  # Jackson Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSSZ
    time-zone: UTC
    default-property-inclusion: non-null
  
  # Cache Configuration
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=500,expireAfterAccess=600s
  
  # Mail Configuration
  mail:
    host: ${SPRING_MAIL_HOST:smtp.example.com}
    port: ${SPRING_MAIL_PORT:587}
    username: ${SPRING_MAIL_USERNAME:your-email@example.com}
    password: ${SPRING_MAIL_PASSWORD:your-email-password}
    properties:
      mail:
        smtp:
          auth: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH}
          starttls:
            enable: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE}
  
  # Multipart File Upload Configuration
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB
      file-size-threshold: 2KB

# Logging Configuration
logging:
  level:
    root: INFO
    '[com.learning.reelnet]': DEBUG
    '[org.hibernate.SQL]': DEBUG
    '[org.hibernate.type.descriptor.sql.BasicBinder]': TRACE
    '[org.springframework.security]': DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/reelnet.log
  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 30

# Swagger/OpenAPI Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  default-produces-media-type: application/json
  packages-to-scan: com.learning.reelnet.modules
  paths-to-match: /api/**

# CORS Configuration
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
  allowed-headers: ${CORS_ALLOWED_HEADERS:Content-Type,Authorization}
  exposed-headers: ${CORS_EXPOSED_HEADERS:Authorization}
  max-age: ${CORS_MAX_AGE:3600}
  allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}

# Auth0 Configuration
auth0:
  domain: ${AUTH0_DOMAIN:your-auth0-domain.auth0.com}
  audience: ${AUTH0_AUDIENCE:your-auth0-api-identifier}
  client-id: ${AUTH0_CLIENT_ID:your-auth0-client-id}
  client-secret: ${AUTH0_CLIENT_SECRET:your-auth0-client-secret}
  issuer: https://${AUTH0_DOMAIN:your-auth0-domain.auth0.com}/

# Security Configuration
security:
  jwt:
    token:
      secret-key: ${JWT_SECRET_KEY:your-secret-key-should-be-at-least-256-bits}
      expire-length: ${JWT_EXPIRATION} # 24 hours
      refresh-token:
        expire-length: ${JWT_REFRESH_EXPIRATION} # 7 days

# Custom Application Properties
app:
  # API Configuration
  api:
    problem-base-url: https://api.reelnet.com/problems
    version: v1
  
  # Pagination Configuration
  pagination:
    default-page-size: 20
    max-page-size: 100
  
  # File Storage Configuration
  storage:
    location: ${user.home}/reelnet/uploads
    allowed-content-types: image/jpeg,image/png,image/gif,application/pdf
    max-file-size: 5MB
  
  # Email Configuration
  email:
    from: noreply@reelnet.com
    support: support@reelnet.com
  
  # Feature Flags
  features:
    enable-social-login: true
    enable-file-upload: true
    enable-advanced-search: true
  
  # Async Task Configuration
  async:
    core-pool-size: 5
    max-pool-size: 10
    queue-capacity: 25
    thread-name-prefix: ReelNet-Async-

# Actuator Configuration
management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: health,info,metrics,prometheus,env,loggers,flyway,cache,mappings,beans,conditions,configprops,scheduledtasks,threaddump,heapdump,logfile
      cors:
        allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000}
        allowed-methods: GET
  endpoint:
    health:
      show-details: when-authorized
      show-components: when-authorized
      probes:
        enabled: true
      group:
        readiness:
          include: ${management.health.group.readiness.include:db,diskSpace}
        liveness:
          include: ping
    info:
      enabled: true
    env:
      post:
        enabled: false  # Disable changing environment at runtime for security
    shutdown:
      enabled: false    # Disable shutdown endpoint for security
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
    git:
      enabled: true
    build:
      enabled: true
  health:
    defaults:
      enabled: true
    diskspace:
      enabled: true
    db:
      enabled: true
    redis:
      enabled: ${spring.data.redis.enabled:false}
    mail:
      enabled: false
    kafka:
      enabled: ${spring.kafka.enabled:false}
    livenessstate:
      enabled: true
    readinessstate:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.75, 0.95, 0.99
    enable:
      jvm: true
      process: true
      system: true
      logback: true
      tomcat: true
      jdbc: true
  prometheus:
    metrics:
      export:
        enabled: true

# Add application info for the info endpoint
info:
  application:
    name: ${spring.application.name}
    description: Reel Network Application Backend
    version: 0.1.0
  contact:
    email: support@reelnet.com
    website: https://reelnet.com
  server:
    environment: ${spring.profiles.active}